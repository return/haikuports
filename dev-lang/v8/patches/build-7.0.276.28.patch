From 7cf52c811887bf58dc473123489e0568913bc6ee Mon Sep 17 00:00:00 2001
From: Calvin Hill <calvin@hakobaito.co.uk>
Date: Fri, 19 Oct 2018 18:10:21 +0100
Subject: Haiku x86_64 support for build in src/chromium/build.


diff --git a/build_config.h b/build_config.h
index c7b0266..62711c4 100644
--- a/build_config.h
+++ b/build_config.h
@@ -53,6 +53,8 @@
 #define OS_FUCHSIA 1
 #elif defined(__FreeBSD__)
 #define OS_FREEBSD 1
+#elif defined(__HAIKU__)
+#define OS_HAIKU 1
 #elif defined(__NetBSD__)
 #define OS_NETBSD 1
 #elif defined(__OpenBSD__)
@@ -80,7 +82,7 @@
 // For access to standard POSIXish features, use OS_POSIX instead of a
 // more specific macro.
 #if defined(OS_AIX) || defined(OS_ANDROID) || defined(OS_ASMJS) ||    \
-    defined(OS_FREEBSD) || defined(OS_LINUX) || defined(OS_MACOSX) || \
+    defined(OS_FREEBSD) || defined(OS_HAIKU) || defined(OS_LINUX) || defined(OS_MACOSX) || \
     defined(OS_NACL) || defined(OS_NETBSD) || defined(OS_OPENBSD) ||  \
     defined(OS_QNX) || defined(OS_SOLARIS)
 #define OS_POSIX 1
diff --git a/config/BUILD.gn b/config/BUILD.gn
index b3cb81c..cf4a7b9 100644
--- a/config/BUILD.gn
+++ b/config/BUILD.gn
@@ -348,7 +348,7 @@ config("executable_config") {
       "//build/config/ios:ios_dynamic_flags",
       "//build/config/ios:ios_executable_flags",
     ]
-  } else if (is_linux || is_android || current_os == "aix") {
+  } else if (is_linux || is_android || current_os == "aix" || current_os == "haiku") {
     configs += [ "//build/config/gcc:executable_ldconfig" ]
     if (is_android) {
       configs += [ "//build/config/android:executable_config" ]
diff --git a/config/BUILDCONFIG.gn b/config/BUILDCONFIG.gn
index 387fdb2..0326e7f 100644
--- a/config/BUILDCONFIG.gn
+++ b/config/BUILDCONFIG.gn
@@ -216,7 +216,11 @@ if (host_toolchain == "") {
     }
   } else if (host_os == "aix") {
     host_toolchain = "//build/toolchain/aix:$host_cpu"
-  } else {
+  }
+   else if (host_os == "haiku") {
+    host_toolchain = "//build/toolchain/haiku:clang_$host_cpu"
+  }
+   else {
     assert(false, "Unsupported host_os: $host_os")
   }
 }
@@ -236,7 +240,10 @@ if (target_os == "android") {
   }
 } else if (target_os == "fuchsia") {
   _default_toolchain = "//build/toolchain/fuchsia:$target_cpu"
-} else if (target_os == "ios") {
+} else if (target_os == "haiku") {
+  _default_toolchain = "//build/toolchain/haiku:clang_$target_cpu"
+}
+ else if (target_os == "ios") {
   _default_toolchain = "//build/toolchain/mac:ios_clang_$target_cpu"
 } else if (target_os == "mac") {
   assert(host_os == "mac", "Mac cross-compiles are unsupported.")
@@ -301,6 +308,7 @@ if (current_os == "win" || current_os == "winuwp") {
   is_nacl = false
   is_posix = false
   is_win = true
+  is_haiku = false
 } else if (current_os == "mac") {
   is_aix = false
   is_android = false
@@ -312,6 +320,7 @@ if (current_os == "win" || current_os == "winuwp") {
   is_nacl = false
   is_posix = true
   is_win = false
+  is_haiku = false
 } else if (current_os == "android") {
   is_aix = false
   is_android = true
@@ -323,6 +332,7 @@ if (current_os == "win" || current_os == "winuwp") {
   is_nacl = false
   is_posix = true
   is_win = false
+  is_haiku = false
 } else if (current_os == "chromeos") {
   is_aix = false
   is_android = false
@@ -334,6 +344,7 @@ if (current_os == "win" || current_os == "winuwp") {
   is_nacl = false
   is_posix = true
   is_win = false
+  is_haiku = false
 } else if (current_os == "nacl") {
   # current_os == "nacl" will be passed by the nacl toolchain definition.
   # It is not set by default or on the command line. We treat is as a
@@ -348,6 +359,7 @@ if (current_os == "win" || current_os == "winuwp") {
   is_nacl = true
   is_posix = true
   is_win = false
+  is_haiku = false
 } else if (current_os == "fuchsia") {
   is_aix = false
   is_android = false
@@ -359,6 +371,7 @@ if (current_os == "win" || current_os == "winuwp") {
   is_nacl = false
   is_posix = false
   is_win = false
+  is_haiku = false
 } else if (current_os == "ios") {
   is_aix = false
   is_android = false
@@ -370,6 +383,7 @@ if (current_os == "win" || current_os == "winuwp") {
   is_nacl = false
   is_posix = true
   is_win = false
+  is_haiku = false
 } else if (current_os == "linux") {
   is_aix = false
   is_android = false
@@ -381,6 +395,7 @@ if (current_os == "win" || current_os == "winuwp") {
   is_nacl = false
   is_posix = true
   is_win = false
+  is_haiku = false
 } else if (current_os == "aix") {
   is_aix = true
   is_android = false
@@ -392,6 +407,19 @@ if (current_os == "win" || current_os == "winuwp") {
   is_nacl = false
   is_posix = true
   is_win = false
+  is_haiku = false
+} else if (current_os == "haiku") {
+  is_aix = true
+  is_android = false
+  is_chromeos = false
+  is_fuchsia = false
+  is_ios = false
+  is_linux = false
+  is_mac = false
+  is_nacl = false
+  is_posix = true
+  is_win = false
+  is_haiku = true
 }
 
 # =============================================================================
diff --git a/config/clang/BUILD.gn b/config/clang/BUILD.gn
index 11dba35..e9a139f 100644
--- a/config/clang/BUILD.gn
+++ b/config/clang/BUILD.gn
@@ -64,6 +64,7 @@ config("find_bad_constructs") {
 # Enables some extra Clang-specific warnings. Some third-party code won't
 # compile with these so may want to remove this config.
 config("extra_warnings") {
+   if (!is_haiku) {
   cflags = [
     "-Wheader-hygiene",
 
@@ -72,4 +73,5 @@ config("extra_warnings") {
 
     "-Wtautological-overlap-compare",
   ]
+   }
 }
diff --git a/config/clang/clang.gni b/config/clang/clang.gni
index 2c2d76f..9ded4f4 100644
--- a/config/clang/clang.gni
+++ b/config/clang/clang.gni
@@ -6,6 +6,9 @@ import("//build/toolchain/toolchain.gni")
 
 default_clang_base_path = "//third_party/llvm-build/Release+Asserts"
 
+if(is_haiku){
+  default_clang_base_path = ""
+}
 declare_args() {
   # Indicates if the build should use the Chrome-specific plugins for enforcing
   # coding guidelines, etc. Only used when compiling with Clang.
diff --git a/config/compiler/BUILD.gn b/config/compiler/BUILD.gn
index b34d8fd..086b8d6 100644
--- a/config/compiler/BUILD.gn
+++ b/config/compiler/BUILD.gn
@@ -231,6 +231,8 @@ config("compiler") {
     configs += [ "//build/config/fuchsia:compiler" ]
   } else if (current_os == "aix") {
     configs += [ "//build/config/aix:compiler" ]
+  } else if (current_os == "haiku") {
+    configs += [ "//build/config/haiku:compiler" ]
   }
 
   configs += [
@@ -373,7 +375,7 @@ config("compiler") {
 
   # Linux/Android/Fuchsia common flags setup.
   # ---------------------------------
-  if (is_linux || is_android || is_fuchsia) {
+  if (is_linux || is_android || is_fuchsia || is_haiku) {
     if (use_pic) {
       cflags += [ "-fPIC" ]
       ldflags += [ "-fPIC" ]
@@ -476,7 +478,7 @@ config("compiler") {
 
   # Clang-specific compiler flags setup.
   # ------------------------------------
-  if (is_clang) {
+  if (is_clang && !is_haiku) {
     cflags += [ "-fcolor-diagnostics" ]
 
     # Enable -fmerge-all-constants. This used to be the default in clang
@@ -524,7 +526,7 @@ config("compiler") {
   # Currently disabled for nacl since its toolchain lacks this flag (too old).
   # TODO(zforman): Once nacl's toolchain is updated, remove check.
   if (symbol_level != 0 && is_clang && !is_nacl && !is_mac && !is_ios &&
-      strip_absolute_paths_from_debug_symbols) {
+      strip_absolute_paths_from_debug_symbols && !is_haiku) {
     # If debug option is given, clang includes $cwd in debug info by default.
     # For such build, this flag generates reproducible obj files even we use
     # different build directory like "out/feature_a" and "out/feature_b" if
@@ -546,7 +548,7 @@ config("compiler") {
   # Tells the compiler not to use absolute paths when passing the default
   # paths to the tools it invokes. We don't want this because we don't
   # really need it and it can mess up the goma cache entries.
-  if (is_clang && !is_nacl) {
+  if (is_clang && !is_nacl && !is_haiku) {
     cflags += [ "-no-canonical-prefixes" ]
   }
 
@@ -1702,7 +1704,7 @@ config("thin_archive") {
   # Mac and iOS use the mac-specific "libtool" command, not ar, which doesn't
   # have a "thin archive" mode (it does accept -T, but it means truncating
   # archive names to 16 characters, which is not what we want).
-  if ((is_posix && !is_nacl && !is_mac && !is_ios) || is_fuchsia) {
+  if ((is_posix && !is_nacl && !is_mac && !is_ios && !is_haiku) || is_fuchsia) {
     arflags = [ "-T" ]
   }
 }
diff --git a/config/haiku/BUILD.gn b/config/haiku/BUILD.gn
new file mode 100644
index 0000000..2e25200
--- /dev/null
+++ b/config/haiku/BUILD.gn
@@ -0,0 +1,61 @@
+# Copyright 2017 The Chromium Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+import("//build/config/sanitizers/sanitizers.gni")
+import("//build/toolchain/toolchain.gni")
+
+# This is included by reference in the //build/config/compiler config that
+# is applied to all targets. It is here to separate out the logic.
+
+config("compiler") {
+  # These flags are shared between the C compiler and linker.
+
+  defines = [
+    "__STDC_FORMAT_MACROS",
+  ]
+
+  cflags = [
+    "-Wall",
+    "-Wno-unused-parameter",
+    "-Wmissing-field-initializers",
+    "-Wno-uninitialized",
+    "-O3",
+    "-Wno-unused-local-typedefs",
+    "-Wno-deprecated-declarations",
+    "-fno-delete-null-pointer-checks",
+    "-Wno-comments",
+    "-fomit-frame-pointer",
+    "-g0",
+    "-fvisibility=hidden",
+    "-Wno-strict-overflow",
+    "-Wno-return-type",
+    "-fno-ident",
+    "-fdata-sections",
+    "-ffunction-sections",
+    "-Wno-narrowing",
+    "-fno-exceptions",
+    "-fno-rtti",
+    "-fvisibility-inlines-hidden",
+    "-fstack-protector",
+    "--param=ssp-buffer-size=4",
+    "-fstack-protector",
+    "-Wno-builtin-macro-redefined"
+    # "-Werror"
+    # We need to find a way to fix the TOC warnings if we want to enable this.
+  ]
+
+  cflags_cc = [
+    "-std=c++11",
+
+  ]
+
+  ldflags = [
+    "-lroot",
+    "-lstdc++",
+    "-lbsd",
+    "-lssp",
+    "-lnetwork",
+  ]
+
+}
diff --git a/toolchain/gcc_toolchain.gni b/toolchain/gcc_toolchain.gni
index adadb74..4eb14bf 100644
--- a/toolchain/gcc_toolchain.gni
+++ b/toolchain/gcc_toolchain.gni
@@ -389,9 +389,9 @@ template("gcc_toolchain") {
       command = "$python_path \"$solink_wrapper\" --readelf=\"$readelf\" --nm=\"$nm\" $strip_switch--sofile=\"$unstripped_sofile\" --tocfile=\"$tocfile\"$map_switch --output=\"$sofile\" -- $link_command"
 
       if (target_cpu == "mipsel" && is_component_build && is_android) {
-        rspfile_content = "-Wl,--start-group -Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive $solink_libs_section_prefix {{libs}} $solink_libs_section_postfix -Wl,--end-group"
+        rspfile_content = "-Wl,--start-group -Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive $solink_libs_section_prefix {{libs}} $solink_libs_section_postfix -Wl,--end-group -lssp"
       } else {
-        rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive $solink_libs_section_prefix {{libs}} $solink_libs_section_postfix"
+        rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive $solink_libs_section_prefix {{libs}} $solink_libs_section_postfix -lssp -lexecinfo"
       }
 
       description = "SOLINK $sofile"
@@ -442,13 +442,13 @@ template("gcc_toolchain") {
         unstripped_sofile = sofile
       }
 
-      command = "$ld -shared {{ldflags}}${extra_ldflags} -o \"$unstripped_sofile\" -Wl,-soname=\"$soname\" @\"$rspfile\""
+      command = "$ld -shared {{ldflags}}${extra_ldflags} -o \"$unstripped_sofile\" -Wl,-soname=\"$soname\" @\"$rspfile\" -lssp"
 
       if (defined(invoker.strip)) {
         strip_command = "${invoker.strip} -o \"$sofile\" \"$unstripped_sofile\""
         command += " && " + strip_command
       }
-      rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive $solink_libs_section_prefix {{libs}} $solink_libs_section_postfix"
+      rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive $solink_libs_section_prefix {{libs}} -lexecinfo $solink_libs_section_postfix"
 
       description = "SOLINK_MODULE $sofile"
 
@@ -508,9 +508,10 @@ template("gcc_toolchain") {
       end_group_flag = ""
       if (current_os != "aix") {
         # the "--start-group .. --end-group" feature isn't available on the aix ld.
-        start_group_flag = "-Wl,--start-group"
-        end_group_flag = "-Wl,--end-group "
+        start_group_flag = "-Wl,--start-group -lssp -lexecinfo -lnetwork"
+        end_group_flag = "-Wl,--end-group -lssp -lexecinfo -lnetwork"
       }
+
       link_command = "$ld {{ldflags}}${extra_ldflags} -o \"$unstripped_outfile\" $start_group_flag @\"$rspfile\" {{solibs}} $end_group_flag $libs_section_prefix {{libs}} $libs_section_postfix"
 
       strip_switch = ""
diff --git a/toolchain/haiku/BUILD.gn b/toolchain/haiku/BUILD.gn
new file mode 100644
index 0000000..0b31ead
--- /dev/null
+++ b/toolchain/haiku/BUILD.gn
@@ -0,0 +1,76 @@
+# Copyright 2017 The Chromium Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+import("//build/toolchain/gcc_toolchain.gni")
+
+
+gcc_toolchain("x86") {
+  cc = "gcc"
+  cxx = "g++"
+
+  readelf = "readelf"
+  nm = "nm"
+  ar = "ar"
+  ld = cxx
+
+  # Output linker map files for binary size analysis.
+  enable_linker_map = true
+
+  is_clang = false
+
+  extra_ldflags="-lroot -lbsd -lnetwork -lssp"
+
+
+  toolchain_args = {
+    current_cpu = "x86"
+    current_os = "haiku"
+    is_clang = false
+  }
+}
+
+gcc_toolchain("x64") {
+  cc = "gcc"
+  cxx = "g++"
+
+  readelf = "readelf"
+  nm = "nm"
+  ar = "ar"
+  ld = cxx
+
+  # Output linker map files for binary size analysis.
+  enable_linker_map = true
+
+  is_clang = false
+
+  extra_ldflags="-lroot -lbsd -lnetwork -lssp"
+
+
+  toolchain_args = {
+    current_cpu = "x64"
+    current_os = "haiku"
+    is_clang = false
+  
+  }
+}
+
+clang_toolchain("clang_x64") {
+  # Output linker map files for binary size analysis.
+  enable_linker_map = true
+  
+  
+  toolchain_args = {
+    current_cpu = "x64"
+    current_os = "haiku"
+  }
+}
+
+clang_toolchain("clang_x86") {
+  # Output linker map files for binary size analysis.
+  enable_linker_map = true
+  
+  toolchain_args = {
+    current_cpu = "x86"
+    current_os = "haiku"
+  }
+}
-- 
2.19.0

