SUMMARY="Google's open source JavaScript engine"
DESCRIPTION="V8 is Google's open source JavaScript engine. V8 is written in \
C++ and is used in Google Chrome, the open source browser from Google. V8 \
implements ECMAScript as specified in ECMA-262, 5th edition, and runs on \
Windows (XP or newer), Mac OS X (10.5 or newer), and Linux systems that use \
IA-32, x64, or ARM processors. V8 can run standalone, or can be embedded into \
any C++ application."
HOMEPAGE="https://v8.dev/"
COPYRIGHT="2006-2018 The V8 Project Authors"
LICENSE="BSD (3-clause)"
REVISION="1"
SOURCE_URI="https://github.com/v8/v8/archive/$portVersion.tar.gz"
SOURCE_DIR="v8-$portVersion"
CHECKSUM_SHA256="f683e6512b38cc6af160f764e87eb54a8547261392c48e85cf33fe389b167aa3"
srcGitRev2="211b3ed9d0481b4caddbee1322321b86a483ca1f"
SOURCE_URI_2="git+https://chromium.googlesource.com/chromium/src/base/trace_event/common.git#$srcGitRev2"
srcGitRev3="dd6b994b32b498e9e766ce60c44da0aec3a2a188"
SOURCE_URI_3="git+https://chromium.googlesource.com/chromium/src/build.git#$srcGitRev3"
srcGitRev4="2dff9c9c74e9d732e6fe57c84ef7fd044cc45d96"
SOURCE_URI_4="git+https://chromium.googlesource.com/chromium/buildtools.git#$srcGitRev4"
srcGitRev5="b41863e42637544c2941b574c7877d3e1f663e25"
SOURCE_URI_5="git+https://chromium.googlesource.com/chromium/src/third_party/jinja2.git#$srcGitRev5"
srcGitRev6="8f45f5cfa0009d2a70589bcda0349b8cb2b72783"
SOURCE_URI_6="git+https://chromium.googlesource.com/chromium/src/third_party/markupsafe.git#$srcGitRev6"
srcGitRev7="bb4146fb8a9dde405b71914657bb461dc93912ab"
SOURCE_URI_7="git+https://chromium.googlesource.com/chromium/src/tools/clang.git#$srcGitRev7"
srcGitRev8="d5266326752f0a1dadbd310932d8f4fd8c3c5e7d"
SOURCE_URI_8="git+https://chromium.googlesource.com/external/github.com/google/googletest.git#$srcGitRev8"

PATCHES="v8-$portVersion.patch"
PATCHES_3="build-$portVersion.patch"

ARCHITECTURES="!x86_gcc2 x86 x86_64"

if [ "$targetArchitecture" = x86_gcc2 ]; then
	SECONDARY_ARCHITECTURES="x86"
	ARCH=x86
else
	ARCH=x64
fi

# On x86_gcc2 we don't want to install the commands in bin/<arch>/, but in bin/.
commandBinDir=$binDir
if [ "$targetArchitecture" = x86_gcc2 ]; then
    commandBinDir=$prefix/bin
fi

PROVIDES="
	v8$secondaryArchSuffix = $portVersion
	cmd:d8$commandSuffix = $portVersion
	lib:libv8$secondaryArchSuffix = $portVersion
	lib:libv8_for_testing$secondaryArchSuffix = $portVersion
	lib:libv8_libbase$secondaryArchSuffix = $portVersion
	lib:libv8_libplatform$secondaryArchSuffix = $portVersion
	"
REQUIRES="
	haiku$secondaryArchSuffix
	lib:libexecinfo$secondaryArchSuffix
	lib:libssp$secondaryArchSuffix
	"

PROVIDES_devel="
	v8${secondaryArchSuffix}_devel = $portVersion
	devel:libv8$secondaryArchSuffix
	"
REQUIRES_devel="
	v8$secondaryArchSuffix == $portVersion
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	gcc${secondaryArchSuffix}_syslibs
	gcc${secondaryArchSuffix}_syslibs_devel
	llvm7$secondaryArchSuffix
	llvm7${secondaryArchSuffix}_libs
	devel:libgcc$secondaryArchSuffix
	devel:libexecinfo$secondaryArchSuffix
	"
BUILD_PREREQUIRES="
	cmd:clang
	cmd:clang++
	cmd:gcc$secondaryArchSuffix
	cmd:g++$secondaryArchSuffix
	cmd:gn$secondaryArchSuffix
	cmd:ld$secondaryArchSuffix
	cmd:ninja
	cmd:python
	cmd:which
	"

BUILD()
{
	cd $sourceDir

	mkdir -p base/trace_event/common
	mkdir -p build
	mkdir -p buildtools
	mkdir -p third_party/jinja2
	mkdir -p third_party/markupsafe
	mkdir -p tools/clang
	mkdir -p third_party/googletest/src

	cp -rf /sources-2/* $sourceDir/base/trace_event/common
	cp -rf /sources-3/* $sourceDir/build/
	cp -rf /sources-4/* $sourceDir/buildtools
	cp -rf /sources-5/* $sourceDir/third_party/jinja2
	cp -rf /sources-6/* $sourceDir/third_party/markupsafe
	cp -rf /sources-7/* $sourceDir/tools/clang
	cp -rf /sources-8/* $sourceDir/third_party/googletest/src

	mkdir -p out.gn

	gn gen out.gn/$ARCH.release --args="target_os=\"haiku\" target_cpu=\"$ARCH\"
        v8_enable_embedded_builtins = false is_debug = false symbol_level=0
        is_clang=true treat_warnings_as_errors=false use_sysroot=false
        v8_enable_i18n_support=false is_component_build=true"

	ninja -C out.gn/$ARCH.release $jobArgs
}

INSTALL()
{
	mkdir $commandBinDir
	cp -af out.gn/$ARCH.release/d8 ${commandBinDir}
	mkdir -p ${includeDir}/v8
	cp -af include/*  ${includeDir}/v8
	mkdir -p $libDir
	cp -af out.gn/$ARCH.release/*.so ${libDir}

	prepareInstalledDevelLibs libv8
	packageEntries devel $developDir
}

TEST()
{
	export LIBRARY_PATH=$LIBRARY_PATH::./out.gn/$ARCH.release

	python tools/run-tests.py --gn -p color \
	--report -v $jobArgs -m release mjsunit webkit # mjsunit cctest
}

